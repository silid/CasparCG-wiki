=Communication=
The ''Advanced Media Control Protocol'' (AMCP) is the main communication protocol used to control and query CasparCG Server.

* All communication is presumed to be encoded in UTF-8.
* Each command has to be terminated with both a carriage return and a linefeed character. For example:
** <tt>\r\n</tt>
** <tt><CR><LF></tt>
** <tt><0x0D><0x0A></tt>
** <tt><13><10></tt>
* The whole command string is case insensitive.
* Since the parameters in a command is separated by spaces, you need to enclose the parameter with quotation marks if you want it to contain spaces.

=Backwards Compatibility=
The AMCP 2.1 protocol implementation is mostly backward compatible with the previous [[CasparCG 1.7.1 AMCP Protocol]], [[CasparCG 1.8.0 AMCP Protocol]] and [[CasparCG 2.0 AMCP Protocol]]

==Breaking Changes (Since 2.0)==

=Special sequences=
Since bare quotation marks are used to keep parameters with spaces in one piece, there has to be another way to indicate a quotation mark in a string. Enter special sequences. They behave as in most programming languages. The escape character is the backslash '''<tt>\</tt>''' character. In order to get a quotation mark you enter '''<tt>\</tt>"''' in the command.

Valid sequences:
* <tt>\"</tt>  Quotation mark
* <tt>\\</tt>  Backslash
* <tt>\n</tt>  New line

These sequences apply to all parameters, it doesn't matter if it's a file name or a long string of XML data.

=Return Codes=
	
==Information==
* <tt>100 [action]</tt> - Information about an event.
* <tt>101 [action]</tt> - Information about an event. A line of data is being returned.
	
==Successful==
* <tt>200 [command] OK</tt>		- The command has been executed and several lines of data (seperated by \r\n) are being returned (terminated with an additional \r\n)
* <tt>201 [command] OK</tt>		- The command has been executed and data (terminated by \r\n) is being returned.
* <tt>202 [command] OK</tt>		- The command has been executed.

==Client Error==
* <tt>400 ERROR</tt>				- Command not understood and data (terminated by \r\n) is being returned.
* <tt>401 [command] ERROR</tt>		- Illegal video_channel
* <tt>402 [command] ERROR</tt>		- Parameter missing
* <tt>403 [command] ERROR</tt>		- Illegal parameter
* <tt>404 [command] ERROR</tt>		- Media file not found

==Server Error==
* <tt>500 FAILED</tt>				- Internal server error
* <tt>501 [command] FAILED</tt>	- Internal server error
* <tt>502 [command] FAILED</tt>	- Media file unreadable
* <tt>503 [command] FAILED</tt>	- Access error

=Command Specification=

==Required Value==
 [my_value_name:my_type,my_type2]

Required value with one of the comma-separated types <tt>my_type''x''</tt>.

Examples:
A required value for <tt>transition</tt> which can be either <tt>CUT</tt>, <tt>MIX</tt>, <tt>PUSH</tt> or <tt>WIPE</tt>.
 [transition:CUT,MIX,PUSH,WIPE]
 >> CUT
 << CUT

A required value for <tt>video_channel</tt> which must a signed integer.
 [video_channel:int]
 >> 1
 << 1

==Optional Expression==
 {my_expr|my_default_expr}

Optional expression where <tt>my_def_expr</tt> is used if no expression is provided. If <tt>|my_def_expr</tt> is not provided then it is assumed to evaluate to <tt>|""</tt>.

Examples:
An optional expression which will be evaluated to <tt>-0</tt> if not provided.
 {[layer:int]|-0}
 >> -2
 << -2
 >>
 << -0

An optional expression will be evaluated to an emptry string if not provided.
 {[tween:string]}
 >> easeinsine
 << easeinsine
 >>
 <<

{{CasparCG_2.1_AMCP_AutoGenerated}}

[[Category:Communication Protocol]] [[Category:CasparCG Server]]